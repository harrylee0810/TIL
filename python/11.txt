클래스의 변수를 불러올땐  ".변수명" 만 입력한다. 예) iu.name
메서드를 호출할땐? iu.greeting()

0.1 * 3 == 3 => False
print(0.1 * 3) => 0.30000000000000004

# 처리방법 1-1. 절대값을 비교
a = 0.1 * 3
b = 0.3

abs(a - b) <= 1e-10

# 처리방법 1-2. 절대값 비교를 내장된 float epsilon값과 비교
import sys
abs(a - b) <= sys.float_info.epsilon

# 처리방법 2. math 모듈을 통해 근사한 값인지 비교
# python 3.5부터는 math 모듈을 활용할 수 있다.
import math
math.isclose(a, b)

divmod: 몫과 나머지를 구하는 함수
div(5,2) => (2,1): 몫 2 나머지 1


**중요** 논리연산자

a and b: a와 b 모두 True일때 True
a or b: a와 b 모두 False일때 False


and:
 뒤에까지 확인,
 False일때 정지. 

or: 
 앞에서 멈출 수 있음(참일 경우)
 False라면뒤에 까지 확ㄱ인

# quiz!
print(3 and 5) => 5
print(0 and 3) => 0
print(3 and 0) => 0
print(0 and 0) => 0

print(3 or 5) => 5
print(0 or 3) => 3
print(3 or 0) => 3
print(0 or 0) => 0


암시적 형변환: Bool / Numbers(int, float, complex)의 경우 형변환 가능


시퀀스 자료형: 데이터 순서대로 나열한 형식(순서대로 나열되었다는 것은 아님!!)
리스트 / 튜플 / 레인지 / 문자열 / 바이너리

튜플: 리스트와 유사하나 ()로 표현. 수정 불가능(immutable), 읽기만 가능.

문자열 갯수 세기: count 함수
s  = 'string'
s.count('t') : 1


비 시퀀스 자료형: 셋, 딕셔너리
1) 세트: 수학의 집합과 같음. {}로 만들며 순서x 중복된 값 x
2) 딕셔너리 


25: my_bin(12) + 1
my_bin(12) = my_bin(6) + 0
m_bin(6) =  my_bin(3) + 0
my_bin(3) = my_bin(1) + 1
my_bin(1) = 0b1


내장함수 목록보기: dir(__builtins__)


기본 매개 변수 지정은 반드시 뒤에 입력해야함!!
(잘못된 예제)
def greeting(name='ssafy', age):
    print(f'{name} {age}') 

(올바른 예제)
def greeting(age,name='ssafy'):
    print(f'{name}은 {age}')

	greeting(1)
	greeting(2, '미래의 싸피')


	ssafy은 1
	미래의 싸피은 2


문자열 메소드 변형하기
a.capitalize(): 앞글자만 대문자
a.title(): ' 또는 공백 이후 대문자
a.upper(): 모두 대문자
a.lower(): 모두 소문자
a.swapcase(): 대<->소문자

a = 'wooooow'
a.replace('o','',2) : 바꿀대상, 새로운 글자, count

a.strip(): 글자제거 (양쪽만). 지정하지 않을시, 공백 또는 개행문자/탭문자 제거
a.lstrip(): 왼쪽끝 글자 제거
a.rstirp(): 오른쪽 끝 글자 제거


'     oh!\n'.strip()
'oh!'
'      oh!\n'.lstrip()
'oh!\n'
'      oh!\n'.rstrip()
'      oh!'



참거짓 반환

.isspace(): 공백 확인
.isalpha(): 알파벳 확인
.isdecimal(): 숫자문자 확인 (지수, 분수 확인 불가)
.isdigit(): 숫자의 형태로 구성된지 확인(분수 확인 불가)
.isnumeric(): 숫자관련 모든것 확인
.isupper(): 대문자 확인
.islower(): 소문자 확인
.istitle(): 앞글자 대문자 확인

.split(): 문자열을 특정 단위로 나누어 리스트로 반환

값 추가 및 삭제

.append(x)
.extend(iterable)
 => 리스트에 iterable(list, range, tuple, string) 값을 붙일 수 있음.
비교)
	cafe = ['starbucks', 'tomntoms','hollys']
	cafe.append('tim holten')
	cafe.extend(['beens' , '빽다방'])
	*주의, 문자열도 시퀀스 및 iterable하므로, cafe.extend('coffeegrunaru')를 넣을 경우 아래처럼 입력이들어가버림.
	['starbucks', 'tomntoms', 'hollys', 'c', 'o', 'f', 'f', 'e', 'e', 'g', 'u', 'r', 'u', 'n', 'a', 'r', 'u']

a. insert(0, 'hi'): 정해진 위치(0)에 'hi' 삽입

	cafe = ['starbucks', 'tomntoms', 'hollys', 'caffebene', 'droptop', '빽다방', 'mcafe', 'burgerking']
	cafe.insert(0, 'hi')
	['hi', 'starbucks', 'tomntoms', 'hollys', 'caffebene']

a.remove(1): 1 삭제
값이 없을 경우 오류 발생(ValueError)
a.pop(1): 인덱스 1의 값 삭제
	a = [1,2,3,4,5]
	a.pop(1) <= 2
	a = [1,3,4,5]
pop된 값을 별도의 변수에 저장 가능
지정x시 맨뒤의 값 삭제



탐색 및 검증
'apple'.find('p'): p의 첫번째 위치 반환, 없으면 -1 (=>1)
'apple'.index('p'): p의 첫번째 위치 반환. 없으면 오류 발생
'apple`.count('p'): p의 갯수 확인 (=> 2개)

.sort(): 리스트 정렬
	a =[1, 5, 45, 7, 10]
	a.sort()
	print(a) => [1,5,7,10,45]

sorted(a)도 가능

.reverse(): 반대로 뒤집음(정렬 x)
	classroom = ['Tom', 'David', 'Justin']
	classroom.reverse() => ['Justin', 'David', 'Tom']


얕은 복사와 깊은 복사


얕은 복사: 주소값을 공유함. 
	a = [1,2,[1,2]]
	b = a[:]
	b[2][0] = 3
	print(a) => [1,2,[3,2]
	print(b) => [1,2,[3,2]

깊은 복사: 주소 값이 다름. 독립적인 공간을 형성
	import copy
	a = [1,2,[1,2]]
	b = copy.deepcopy(a)
	b[2][0] = 3
	print(a) => [1,2,[1,2]]
	print(b) => [1,2,[3,2]]


딕셔너리 메소드 활용
(1) .pop(key, default값)
	my_dict = {'apple': '사과', 'banana': '바나나'}
	my_dict.pop('apple') => '사과'
	print(my_dict) => {'banana': '바나나'}
	키 값이 없을 경우 에러 발생

	my_dict.pop('melon', 0) => 0 출력

(2) .update(dict): key, value 페어 추가. key 존재 시, value를 덮어씀.
	my_dict = {'apple': '사과', 'banana': '바나나'}
	my_dict.update({'pear':'배}) => {'apple': '사과', 'banana': '바나나', 'pear': '배'}


(3) .get(key, dafault값)
	key를 통해 value를 가지고 옴. 절대로 key 에러 발생하지 않음.
	default의 기본 값은 none
	my_dict = {'apple': '사과', 'banana': '바나나', 'melon': '멜론'}
	my_dict.get('apple') => '사과'
	my_dict.get('watermelon') => None
	my_dict.get('pineapple', 0) => 0



***정리: map(), zip(), filter() ***
(1) map
iterable한 모든원소에 function을 적용한 후 그 결과를 돌려줍니다
예) a = ['1','2','3']
list(map(int, a)) => [1,2,3]

(2) zip
복수 iterable한 것들을 모아준다,
결과는 튜플의 모음으로 구성된 zip object를 반환한다.
예)

girls = ['jane', 'iu', 'mary']
boys = ['justin', 'david', 'kim']
list(zip(girls, boys))
[('jane', 'justin'), ('iu', 'david'), ('mary', 'kim')]

zip은 반드시 길이가 같을때 사용한다. 길이가 짧은것을 기준으로 함.

(3) filter
 iterable에서 function의 반환값이 참인 것만 구성하여 반환함

def even(n):
    return n % 2 == 0
a = [1,2,3,4,5,6,7,8]
list(filter(even,a)) => [2, 4, 6, 8]



세트 메소드 활용
(1) .aad(x): x를 add에 추가
(2) .update(*others): 여러 값을 순차적으로 추가
(3) .remove(x): x를 삭제
(4) .pop(x): x를 제거 후 반환


함수의 인자(parameter)는 함수 선언 시 설정한 값이며, 인수(argument)는 함수 호출 시 
넘겨 주는 값 이다.

만들때 쓰는건 파라미터(인자), 넘겨줄 때 쓰는건 인수(argument)
my_mul 함수에서 *args는 인자, 6  /  3, 5는 인수

